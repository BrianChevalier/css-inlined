{"version":3,"sources":["radiant/core.cljc"],"mappings":";AAIA;;;AAAA,AAAOA,AAEJC;AAFH,AAGE,AACE,AAAAC,AAASD;AAAI,AAACE,AAAKF;;AADrB,AAEE,AAAAG,AAAUH;AAAG,AAACE,AAAKF;;AAFrB,AAGE,AAASA;AAAIA;;AAHf;;;;;AAKF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKI;AAkCL,AAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAUS;AAAVR,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAME,AAAKjB,AAAEmB;AAAP,AAAUnB;AANZ,AAAAa,AAAAL,AAAAE,AAAAC,AAAAC;;;AAQA,AAAAM,AAAA,AAAA,AAEGC,AAAEC;AAFL,AAGE,AAAA,AAAA,AAAUA;;AAEZ,AAAAF,AAAA,AAAA,AAGGC,AAAEC;AAHL,AAIE,AAAI,AAAK,AAACC,AAAOC,AAAQF;AACvB,AAAA,AAACF,AAA6BE;;AAC9B,AAAA,AAAA,AAAU,AAAA,AAACG,AAAe,AAACC,AAAI,AAAA,AAACC,AAAQP,AAA8BE;;;AAE1E,AAAA,AAAOM,AAAOC;AAAd,AAEW,AAAWC,AAAeD;;AAErC,AAAAT,AAAA,AAAA,AAEGlB,AAAEoB;AAFL,AAGE,AACE,AAASA;AACTA;;AAFF,AAIE,AAAAjB,AAAUiB;AACV,AAAClB,AAAKkB;;AALR,AAOE,AAAAnB,AAASmB;AACT,AAAClB,AAAKkB;;AARR,AAUE,AAASA;AACT,AAAI,AAAChB,AAAAA,AAAAA,AAAwBJ,AAAAA;AAAG,AAAKoB;;AAAG,AAAA,AAAKA;;;AAX/C,AAaE,AAAI,AAACS,AAAMT,AAAG,AAACM,AAAMN;AACrB,AAAA,AAAA,AAAK,AAAClB,AAAK,AAAC4B,AAAMV,AAAQ,AAAA,AAACG,AAAY,AAACC,AAAI,AAACC,AAAQP,AAAoB,AAACY,AAAMV,AAAI,AAACW,AAAKX;;AAd5F,AAgBE,AAACE,AAAQF;AACT,AAAA,AAACG,AAAW,AAACC,AAAI,AAACC,AAAQP,AAAoBlB,AAAGoB;;AAjBnD;;;;;;;;AAmBF;;;;AAAA,AAAAY,AAAOG;AAAP,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAGIjC;AAHJ,AAAAkC,AAAAD,AAAA,AAAA,AAGMb;AAHN,AAIE,AAAA,AAAK,AAACrB,AAAkBC,AAAO,AAACkB,AAAoBlB,AAAEoB;;AAExD;;;AAAA,AAAMgB,AAEHC;AAFH,AAGE,AAAA,AAAA,AAAS,AAAA,AAACd,AAAW,AAACC,AAAIW,AAAc,AAACG,AAAKD;;AAEhD,AAAA,AAAAhC,AAAAC,AAAAiC;AAAA;AAAA,AAAA;;;AAAA,AAAA/B,AAAA,AAAAC,AAAA,AAAUgC;AAAV/B,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA0B,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAxB,AAAA,AAAAC,AAAA,AAAA,AAEE,AAAKyB;AAAL,AAAU,AAACC,AAAI,AAACC,AAAKF;AAFvB,AAAA7B,AAAAL,AAAAE,AAAAC,AAAAC;;;AAIA,AAAA6B,AAAA,AAAA,AAAA,AACGC;AADH,AAEE,AAAAG,AAAoBH;AAApBG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAA/B,AAAA+B,AAAA,AAAcI;AAAd,AACE,AAAA,AAASA;;AAEb,AAAAR,AAAA,AAAA,AAAA,AAAA,AACGC;AADH,AAEE,AAAAQ,AAA2BR;AAA3BQ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAJ,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAAC,AAAAE,AAAAA;AAAA,AAAApC,AAAAoC,AAAA,AAAcD;AAAd,AAAAnC,AAAAoC,AAAA,AAAkBC;AAAlB,AACE,AAAA,AAAA,AAASF,AAAQE;;AAErB,AAAAV,AAAA,AAAA,AAAA,AACGC;AADH,AAEE,AAAAU,AAAqBV;AAArBU,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAN,AAAA,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAAL,AAAAC,AAAAI,AAAAA;AAAA,AAAAtC,AAAAsC,AAAA,AAAcC;AAAd,AACE,AAEE,AAACC,AAAKD;AACN,AAAA,AAAC9B,AAAY,AAACC,AAAIzB,AAAkB,AAACuC,AAAKe;;AAH5C,AAKE,AAAC/B,AAAQ+B;AACT,AAAA,AAAC9B,AAAW,AAACC,AAAIzB,AAAkBsD;;AANrC,AAQE,AAAK,AAACE,AAAMF;AACZ,AAACtD,AAAkBsD;;AATrB;;;;;AAWJ,AAAAZ,AAAA,AAAA,AAAA,AAAA,AACGC;AADH,AAEE,AAAAc,AAA4Bd;AAA5Bc,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAV,AAAA,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAAT,AAAAC,AAAAQ,AAAAA;AAAA,AAAA1C,AAAA0C,AAAA,AAAcH;AAAd,AAAAvC,AAAA0C,AAAA,AAAmBL;AAAnB,AACE,AACE,AAACG,AAAKD;AACN,AAAA,AAAC9B,AACO,AAAAkC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AA2zEqC,AAAAiF,AAAAtF;AA3zErCM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMQ;AAAN,AAAA,AAAA,AAAAN,AAAAJ,AACE,AAAA,AAAK,AAACnE,AAAkB6E,AAASzB;;AADnC,AAAA,AAAAiB,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAApC,AAAA4B,AAAMkB;AAAN,AAAA,AAAAD,AAAA,AAAAF,AAAA,AAAA1C,AAAA2B,AACE,AAAA,AAAK,AAAC3D,AAAkB6E,AAASzB;;;AADnC;;;;AAAA,AAAA;;AAAA,AAAA,AAAAM,AAAUJ;;;AAHpB,AAKE,AAAC/B,AAAQ+B;AACT,AAAA,AAAC9B,AACO,AAAAkC,AAAA,AAAAoB;AAAA,AAAA,AAAAlB,AAAA,AAAA;AAAA,AAAA,AAAAkB,AAAAA;;AAAA,AAAA,AAAAjB,AAAA,AAAAC,AAAAgB;AAAA,AAAA,AAAAjB;AAAA,AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAA,AAAAE,AAAAe;AAAA,AAAAd,AAuzEqC,AAAAiF,AAAAnE;AAvzErCb,AAAA,AAAAC,AAAAF;AAAAe,AAAA,AAAAX,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAe,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAf;AAAA,AAAA,AAAAK,AAAAN,AAAAgB,AAAMH;AAAN,AAAA,AAAA,AAAAN,AAAAQ,AACE,AAAA,AAAK,AAAC/E,AAAkB6E,AAASzB;;AADnC,AAAA,AAAA4B,AAAA;;;;AAAA;;;;;AAAA,AAAAR,AAAA,AAAAC,AAAAM,AAAA,AAAAE,AAAA,AAAAN,AAAAG;;AAAA,AAAAN,AAAA,AAAAC,AAAAM,AAAA;;;AAAA,AAAA,AAAAhD,AAAA+C,AAAMD;AAAN,AAAA,AAAAD,AAAA,AAAAK,AAAA,AAAAjD,AAAA8C,AACE,AAAA,AAAK,AAAC9E,AAAkB6E,AAASzB;;;AADnC;;;;AAAA,AAAA;;AAAA,AAAA,AAAAM,AAAUJ;;;AAPpB;;;;AAUJ,AAAA,AAAAhD,AAAAC,AAAA2E;AAAA;AAAA,AAAA;;;;;;;AAAA,AAAAzE,AAAA,AAAAC,AAAA,AAAU0E;AAAVzE,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAoE,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAlE,AAAA,AAAAC,AAAA,AAAA,AAME;;AACIE;AADJ,AACO;;AACHiE,AAAKpF,AAAEqF;AAFX,AAEiBrF;;AAAboF,AAAKpF,AAAEqF;;;AAAPD;;AAAAA,AAAKpF,AAAEqF;;;;;;;;AARb,AAAAxE,AAAAL,AAAAE,AAAAC,AAAAC;;;AAUA,AAAAuE,AAAA,AAAA,AAGG9C;AAHH,AAIE,AAAA,AAACd,AACO,AAAC+D,AAAO,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAArD,AAAAsD,AAAA,AAAA,AAAMZ;AAAN,AAAA1C,AAAAsD,AAAA,AAAA,AAAUC;AAAV,AACE,AAACjE,AAAI,AAAAkE;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAxD,AAAAyD,AAAA,AAAA,AAAM3F;AAAN,AAAAkC,AAAAyD,AAAA,AAAA,AAAQvE;AAAR,AAAY,AAAA,AAAA,AAAC+D,AAAWP,AAAK5E,AAAEoB;AAAIqE;AAC1CpD;;AAElB,AAAA8C,AAAA,AAAA,AACGzC,AAAIvB,AAAEkB;AADT,AAEE,AACC,AAACI,AAASC,AACV,AAACN,AAAUC;;AAGd,AAAA,AAAOuD,AAAQlD,AAAI1C,AAAEqC;AAArB,AACE,AACC,AAACI,AAAS,AAAA,AAACoD,AAAMnD,AAAY,AAACxC,AAAKF,AACnC,AAACoC,AAAUC;;AAEd,AAAA8C,AAAA,AAAA,AAAsCzC,AAAI1C,AAAEqC;AAA5C,AAAgD,AAACuD,AAAOlD,AAAI1C,AAAEqC;;AAC9D,AAAA8C,AAAA,AAAA,AAAsCzC,AAAI1C,AAAEqC;AAA5C,AAAgD,AAACuD,AAAOlD,AAAI1C,AAAEqC;;AAC9D,AAAA8C,AAAA,AAAA,AAAsCzC,AAAI1C,AAAEqC;AAA5C,AAAgD,AAACuD,AAAOlD,AAAI1C,AAAEqC;;AAC9D,AAAA8C,AAAA,AAAA,AAAsCzC,AAAI1C,AAAEqC;AAA5C,AAAgD,AAACuD,AAAOlD,AAAI1C,AAAEqC;;AAC9D,AAAA8C,AAAA,AAAA,AAAsCzC,AAAI1C,AAAEqC;AAA5C,AAAgD,AAACuD,AAAOlD,AAAI1C,AAAEqC;;AAC9D,AAAA8C,AAAA,AAAA,AAAsCzC,AAAI1C,AAAEqC;AAA5C,AAAgD,AAACuD,AAAOlD,AAAI1C,AAAEqC;;AAG9D,AAAA,AAAMyD,AAAsBpD,AAAI1C,AAAEqC;AAAlC,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAE2B,AAACnC,AAAKF,AAEhC,AAAA,AAACmF,AAAIzC,AAAWL;;AAGnB,AAAA8C,AAAA,AAAA,AAA6BzC,AAAI1C,AAAEqC;AAAnC,AAAsC,AAACyD,AAAqBpD,AAAI1C,AAAEqC;;AAClE,AAAA8C,AAAA,AAAA,AAA6BzC,AAAI1C,AAAEqC;AAAnC,AAAsC,AAACyD,AAAqBpD,AAAI1C,AAAEqC;;AAElE,AAAA8C,AAAA,AAAA,AACGzC,AAAIvB,AAAEkB;AADT,AAEE,AAAA,AAAA,AAAA,AAAA,AAIC,AAAA,AAAC8C,AAAIzC,AAAWL;;AAGnB,AAAA8C,AAAA,AAAA,AACGzC,AAAIvB,AAAEkB;AADT,AAEE,AAAA,AAAA,AAAA,AAAA,AAIC,AAAA,AAAC8C,AAAIzC,AAAWL;;AAGnB,AAAA8C,AAAA,AAAA,AACGzC,AAAIvB,AAAEkB;AADT,AAEE,AAAA,AAAA,AAAA,AAAA,AAIC,AAAA,AAAC8C,AAAIzC,AAAWL;;AAGnB,AAAA,AAAO0D,AAAgBrD;AAAvB,AACE,AAAA,AAAK,AAAA,AAAMA;;AAEb,AAAAyC,AAAA,AAAA,AAEGzC,AAAIvB,AAAEkB;AAFT,AAGE,AAAA,AAAA,AAEC,AAAC0D,AAAerD,AAEhB,AAAA,AAACnB,AAEA,AAAAkC,AAAA,AAAAuC;AAAA,AAAA,AAAArC,AAAA,AAAA;AAAA,AAAA,AAAAqC,AAAAA;;AAAA,AAAA,AAAApC,AAAA,AAAAC,AAAAmC;AAAA,AAAA,AAAApC;AAAA,AAAA,AAAAoC,AAAApC;AAAA,AAAA,AAAA,AAAAE,AAAAkC;AAAA,AAAAjC,AA2tE+C,AAAAiF,AAAAhD;AA3tE/ChC,AAAA,AAAAC,AAAAF;AAAAkC,AAAA,AAAA9B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAkC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAlC;AAAA,AAAAmC,AAAA,AAAA9B,AAAAN,AAAAmC;AAAA,AAAAhE,AAAAiE,AAAA,AAAA,AAAOnG;AAAP,AAAAkC,AAAAiE,AAAA,AAAA,AAAS/E;AAAT,AAAA,AAAA,AAAAkD,AAAA2B,AACE,AAAMjG,AAAE,AAAA,AAAA,AACE,AAAAG,AAAUH,AAAG,AAACE,AAAKF,AACnB,AAASA,AAAG,AAAA,AAAKA,AACXA;;AAHhB,AAIE,AAAKA,AAAE,AAACoC,AAAUhB;;;AALtB,AAAA,AAAA8E,AAAA;;;;AAAA;;;;;AAAA,AAAA3B,AAAA,AAAAC,AAAAyB,AAAA,AAAAG,AAAA,AAAA1B,AAAAsB;;AAAA,AAAAzB,AAAA,AAAAC,AAAAyB,AAAA;;;AAAA,AAAAI,AAAA,AAAAvE,AAAAkE;AAAA,AAAA9D,AAAAmE,AAAA,AAAA,AAAOrG;AAAP,AAAAkC,AAAAmE,AAAA,AAAA,AAASjF;AAAT,AAAA,AAAAuD,AACE,AAAM3E,AAAE,AAAA,AAAA,AACE,AAAAG,AAAUH,AAAG,AAACE,AAAKF,AACnB,AAASA,AAAG,AAAA,AAAKA,AACXA;;AAHhB,AAIE,AAAKA,AAAE,AAACoC,AAAUhB;AALtB,AAAAgF,AAAA,AAAArE,AAAAiE;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAvC,AAAYpB;AANd;;AAcF,AAAA8C,AAAA,AAAA,AAAyBhE,AAAEA,AAAEA;AAA7B,AAAA;;AAEA;;;;AAAA,AAAOmF,AAGJ5D,AAAIL;AAHP,AAIE,AAAI,AAAK,AAAA,AAACkE,AAAUlE,AAAU,AAAA,AAACkE,AAAUlE;AACvC,AAAA,AAAA,AAAA,AAACmE,AAASnE,AAA2B,AAAC0D,AAAerD;;AACrDL;;;AAEJ,AAAA,AAAOoE,AACJpE;AADH,AAEE,AAACU,AAAM2D,AAAOrE,AAAE,AAACO,AAAK,AAAC+D,AAAQxB;;AAEjC;;;;AAAA,AAAOyB,AAGJvE;AAHH,AAIE,AAAMY,AAAI,AAAC4D;AACLxE,AAAE,AAAA,AAAA,AAACiE,AAAkBrD,AAAKZ;AADhC,AAAA,AAAA,AAEQ,AAAA,AAACd,AACO,AAAAkC,AAAA,AAAAqD;AAAA,AAAA,AAAAnD,AAAA,AAAA;AAAA,AAAA,AAAAmD,AAAAA;;AAAA,AAAA,AAAAlD,AAAA,AAAAC,AAAAiD;AAAA,AAAA,AAAAlD;AAAA,AAAA,AAAAkD,AAAAlD;AAAA,AAAA,AAAA,AAAAE,AAAAgD;AAAA,AAAA/C,AA8rEiC,AAAAiF,AAAAlC;AA9rEjC9C,AAAA,AAAAC,AAAAF;AAAAgD,AAAA,AAAA5C,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAgD,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAhD;AAAA,AAAAiD,AAAA,AAAA5C,AAAAN,AAAAiD;AAAA,AAAA9E,AAAA+E,AAAA,AAAA,AAAOjH;AAAP,AAAAkC,AAAA+E,AAAA,AAAA,AAAS7F;AAAT,AAAA,AAAA,AAAAkD,AAAAyC,AACE,AAAA,AAAA,AAAC5B,AAAUlC,AAAKjD,AAAEoB;;AADpB,AAAA,AAAA4F,AAAA;;;;AAAA;;;;;AAAA,AAAAzC,AAAA,AAAAC,AAAAuC,AAAA,AAAAG,AAAA,AAAAxC,AAAAoC;;AAAA,AAAAvC,AAAA,AAAAC,AAAAuC,AAAA;;;AAAA,AAAAI,AAAA,AAAArF,AAAAgF;AAAA,AAAA5E,AAAAiF,AAAA,AAAA,AAAOnH;AAAP,AAAAkC,AAAAiF,AAAA,AAAA,AAAS/F;AAAT,AAAA,AAAAuD,AAAA,AAAAuC,AAAA,AAAAnF,AAAA+E,AACE,AAAA,AAAA,AAAC3B,AAAUlC,AAAKjD,AAAEoB;;;AADpB;;;;AAAA,AAAA;;AAAA,AAAA,AAAAqC,AAAYpB;AAH5B,AAKmBA,AACA,AAAA,AAACwD,AAAa5C,AACd,AAACwD;;AAEtB;;;AAAA,AAAOW,AAEJhG;AAFH,AAGE,AAAMwD,AAAI,AAAC9C,AAAMV;AACXiG,AAAgB,AAACC,AAAK,AAACC,AAAOnG;AAC9BoG,AAAW,AAAA,AAAIH,AAAgB,AAACE,AAAOnG;AACvCqG,AAAQ,AAAIJ,AAAgB,AAAA,AAACK,AAAOtG,AAAG,AAAA,AAACsG,AAAOtG;AAHrD,AAIE,AAAA,AAACuG,AAAM/C,AAAI4C,AAAYC;;AAE3B,AAAA,AAAA,AAAKG;AAGL;;;;;AAAA,AAAMC,AAIHzG;AAJH,AAKE,AAAM2G,AAAO,AAACX,AAAwBhG;AAChCwD,AAAI,AAAC9C,AAAMiG;AACXC,AAAM,AAACT,AAAOQ;AAFpBD,AAG+B,AAAI,AAAAI,AAAI,AAACN,AAAAA,AAAAA,AAAahD,AAAAA;AAAlB,AAAA,AAAAsD;AAAAA;;AAAuB,AAACC,AAAOH;;AAAnC,AAAA,AAAwDA,AAAO,AAACpB,AAAsBoB;AAHrHF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhF,AAAA,AAAAgF,AAAA,AAAA,AAAA,AAAA,AAAA/E,AAAAC,AAAA8E,AAAAA;AAAA,AAAAhH,AAAAgH,AAAA,AAGcN;AAHd,AAAA1G,AAAAgH,AAAA,AAGyBG;AACnBG,AAAO,AAAA,AAACvC,AAAMkC,AAASP;AAJ7B,AAAA,AAAA,AAAA,AAKWY,AACAH;;AAEb;;;;AAAA,AAAOI,AAGJC,AAAElH;AAHL,AAIE,AACE,AAAK,AAACE,AAAQF,AAAG,AAACkG,AAAK,AAACC,AAAOnG;AAC/B,AAAAmH,AAA2B,AAACV,AAAezG;AAA3CmH,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzF,AAAA,AAAAyF,AAAA,AAAA,AAAA,AAAA,AAAAxF,AAAAC,AAAAuF,AAAAA;AAAA,AAAAzH,AAAAyH,AAAA,AAAcN;AAAd,AAAAnH,AAAAyH,AAAA,AAAkBH;AAAlB,AACE,AAACI,AAAMF,AAAEG,AAAI,AAAA,AAAKR;;AAClBG;;AAJJ,AAMEhH;;;;AAEJ;;;;;AAAA,AAAMsH,AAIHtH;AAJH,AAKE,AAAM6G,AAAI,AAAA,AAACxH;AAAX,AAAA,AAAA,AAAA,AACW,AAACkI,AAAU,AAAClH,AAAQ4G,AAAaJ,AAAK7G,AACtC,AAAA,AAAAwH,AAACC,AAAQZ;;AAEtB;;;AAAA,AAAMa,AAEH1H;AAFH,AAGE,AAAA2H,AAA2B,AAACL,AAAmBtH;AAA/C2H,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjG,AAAA,AAAAiG,AAAA,AAAA,AAAA,AAAA,AAAAhG,AAAAC,AAAA+F,AAAAA;AAAA,AAAAjI,AAAAiI,AAAA,AAAcX;AAAd,AAAAtH,AAAAiI,AAAA,AAAqBd;AAArB,AAAA,AAAA,AAAA,AAAA,AAEWA,AACRG;;AAEL","names":["radiant.core/normalize-css-key","k","cljs.core/Symbol","cljs.core/name","cljs.core/Keyword","radiant.core/accepts-unitless-values","js/radiant","js/radiant.core","js/radiant.core.normalize-css-value","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__55312","cljs.core/MultiFn","cljs.core.symbol","radiant.core/normalize-css-value","_","v","cljs.core/every?","cljs.core/vector?","clojure.string.join","cljs.core.map","cljs.core.partial","radiant.core/cons?","x","cljs.core/Cons","cljs.core/list?","cljs.core/first","cljs.core/rest","p__55313","vec__55314","cljs.core.nth","radiant.core/kv->css-attrs","radiant.core/css-block","m","cljs.core.sort","js/radiant.core.selector","fexpr__55317","radiant.core/selector","sel","cljs.core/set","cljs.core/keys","map__55318","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cls","map__55320","pseudo","map__55322","tags","cljs.core/set?","cljs.core/coll?","map__55324","iter__4529__auto__","s__55327","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__55329","cljs.core/chunk-buffer","i__55328","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__55326","cljs.core/chunk-rest","cljs.core/cons","tag","s__55331","b__55333","i__55332","iter__55330","js/radiant.core.css","fexpr__55334","radiant.core/css","_sel","_map","cljs.core.mapcat","p__55335","vec__55336","kv","p__55339","vec__55340","radiant.core/pseudo","cljs.core.assoc","radiant.core/prefers-color-scheme","radiant.core/animation-name","s__55354","b__55356","i__55355","vec__55357","iter__55353","vec__55360","radiant.core/inject-attr","cljs.core/contains?","cljs.core/assoc-in","radiant.core/remove-inline-styles","cljs.core/dissoc","cljs.core/methods","radiant.core/hiccup-attribute->css","cljs.core.gensym","s__55364","b__55366","i__55365","vec__55367","iter__55363","vec__55370","radiant.core/normalize-hiccup-vector","has-attributes?","cljs.core/map?","cljs.core/second","attributes","content","cljs.core.drop","cljs.core.into","radiant.core/ignored-tags","radiant.core/extract-styles","map__55373","normal","attrs","css","or__4126__auto__","cljs.core/empty?","hiccup","radiant.core/inspect-item","a","map__55375","cljs.core.swap_BANG_","cljs.core/str","radiant.core/extract-all-styles","clojure.walk/prewalk","cljs.core/deref","clojure.string/trim","radiant.core/hoist-styles","map__55377","cljs.core/chunk-first"],"sourcesContent":["(ns radiant.core\n  (:require [clojure.string :as s]\n            [clojure.walk :as w]))\n\n(defn- normalize-css-key\n  \"Normalize css keyword to string\"\n  [k]\n  (cond\n    (symbol? k)  (name k)\n    (keyword? k) (name k)\n    (string? k)  k))\n\n(def accepts-unitless-values\n  ;; There may be some missing.\n  ;; https://stackoverflow.com/a/45392255\n  #{:animation-iteration-count\n    :border-image-slice\n    :border-image-width\n    :column-count\n    :counter-increment\n    :counter-reset\n    :columns\n    :flex\n    :flex-grow\n    :flex-shrink\n    :font-size-adjust\n    :font-weight\n    :line-height\n    :nav-index\n    :opacity\n    :order\n    :orphans\n    :tab-size\n    :widows\n    :z-index\n    :pitch-range\n    :richness\n    :speech-rate\n    :volume\n    :flood-opacity\n    :mask-box-outset\n    :mask-border-outset\n    :mask-box-width\n    :mask-border-width\n    :shape-image-threshold})\n\n(defmulti normalize-css-value\n  \"Multimethod that allows processing some css properties\n   differently, converting the css value to a css string dispatches\n   on type by default.\n   Extend this multimethod to handle special css key cases. Will be passed\n   the CSS property as a clojure keyword and the value\"\n  (fn [k _] k))\n\n(defmethod normalize-css-value :content\n  ;; the content css property requires quotes around the value\n  [_ v]\n  (str \"\\\"\" v \"\\\"\"))\n\n(defmethod normalize-css-value :grid-template-areas\n  ;; Given a nested vector grid template area convert to string\n  ;; with double quotes around each row specification.\n  [_ v]\n  (if (not (every? vector? v))\n    (normalize-css-value :default v)\n    (str \"\\\"\" (s/join \"\\\" \\\"\" (map (partial normalize-css-value :default) v)) \"\\\"\")))\n\n(defn- cons? [x]\n  #?(:clj  (instance? clojure.lang.Cons x)\n     :cljs (instance? cljs.core.Cons x)))\n\n(defmethod normalize-css-value :default\n  ;; Dispatch on type by default\n  [k v]\n  (cond\n    (string? v)\n    v\n\n    (keyword? v)\n    (name v)\n\n    (symbol? v)\n    (name v)\n\n    (number? v)\n    (if (accepts-unitless-values k) (str v) (str v \"px\"))\n\n    (or (list? v) (cons? v))\n    (str (name (first v)) \"(\" (s/join \", \" (map (partial normalize-css-value (first v)) (rest v))) \")\")\n\n    (vector? v)\n    (s/join \" \" (map (partial normalize-css-value k) v))))\n\n(defn- kv->css-attrs\n  \"Take a vector with a key-value pair and create css key: value\n  pair for css string\"\n  [[k v]]\n  (str (normalize-css-key k) \":\" (normalize-css-value k v)))\n\n(defn css-block\n  \"Create the non-selector portion of a CSS map\"\n  [m]\n  (str \"{\" (s/join \";\" (map kv->css-attrs (sort m))) \"}\"))\n\n(defmulti selector\n  \"Create a CSS selector given a map. Dispatch on the set of keys given\"\n  (fn [sel] (set (keys sel))))\n\n(defmethod selector #{:cls}\n  [sel]\n  (let [{:keys [cls]} sel]\n    (str \".\" cls)))\n\n(defmethod selector #{:cls :pseudo}\n  [sel]\n  (let [{:keys [cls pseudo]} sel]\n    (str \".\" cls \":\" pseudo)))\n\n(defmethod selector #{:tags}\n  [sel]\n  (let [{:keys [tags]} sel]\n    (cond\n      ;; Set of selectors, selects each one\n      (set? tags)\n      (s/join \", \" (map normalize-css-key (sort tags)))\n      ;; vectors of selectors creates descendant selector\n      (vector? tags)\n      (s/join \" \" (map normalize-css-key tags))\n      ;; single selectors\n      (not (coll? tags))\n      (normalize-css-key tags))))\n\n(defmethod selector #{:tags :pseudo}\n  [sel]\n  (let [{:keys [tags pseudo]} sel]\n    (cond\n      (set? tags)\n      (s/join \", \"\n              (for [tag tags]\n                (str (normalize-css-key tag) \":\" pseudo)))\n      (vector? tags)\n      (s/join \" \"\n              (for [tag tags]\n                (str (normalize-css-key tag) \":\" pseudo))))))\n\n(defmulti css\n  \"A function that dispatches on :style or a :style namespaced key\n\n   Extend this multimethod to add additional styles to extract from a hiccup tree\n   The function should take a CSS class selector `cls`, the dispatch key\n   (i.e. :style, :style/dark), and a map of key-value CSS styles\"\n  (fn\n    ([_] (-> ::normalize))\n    ([_sel k _map] k)))\n\n(defmethod css ::normalize\n  ;; If only one input is given assume css map. redispatch\n  ;; to css to produce css string\n  [m]\n  (s/join \"\\n\"\n          (mapcat (fn [[tag kv]]\n                    (map (fn [[k v]] (css {:tags tag} k v)) kv))\n                  m)))\n\n(defmethod css :style\n  [sel _ m]\n  (str\n   (selector sel)\n   (css-block m)))\n\n;; Pseudo class selectors\n(defn- pseudo [sel k m]\n  (str\n   (selector (assoc sel :pseudo (name k)))\n   (css-block m)))\n\n(defmethod css :style/hover          [sel k m]  (pseudo sel k m))\n(defmethod css :style/focus          [sel k m]  (pseudo sel k m))\n(defmethod css :style/visited        [sel k m]  (pseudo sel k m))\n(defmethod css :style/active         [sel k m]  (pseudo sel k m))\n(defmethod css :style/focus-visible  [sel k m]  (pseudo sel k m))\n(defmethod css :style/focus-within   [sel k m]  (pseudo sel k m))\n\n;; Media queries\n(defn prefers-color-scheme [sel k m]\n  (str\n   \"@media \"\n   \"(prefers-color-scheme: \" (name k) \")\"\n   \"{\"\n   (css sel :style m)\n   \"}\"))\n\n(defmethod css :style/light [sel k m] (prefers-color-scheme sel k m))\n(defmethod css :style/dark  [sel k m] (prefers-color-scheme sel k m))\n\n(defmethod css :style/small\n  [sel _ m]\n  (str\n   \"@media \"\n   \"screen and (max-width: 42rem)\"\n   \"{\"\n   (css sel :style m)\n   \"}\"))\n\n(defmethod css :style/medium\n  [sel _ m]\n  (str\n   \"@media \"\n   \"screen and (min-width: 42rem) and (max-width: 64rem)\"\n   \"{\"\n   (css sel :style m)\n   \"}\"))\n\n(defmethod css :style/large\n  [sel _ m]\n  (str\n   \"@media \"\n   \"screen and (min-width: 64rem)\"\n   \"{\"\n   (css sel :style m)\n   \"}\"))\n\n(defn- animation-name [sel]\n  (str (:cls sel) \"_keyframes\"))\n\n(defmethod css :style/keyframes\n  ;; :style/keyframes { from: {} to: {}}}\n  [sel _ m]\n  (str\n   \"@keyframes \"\n   (animation-name sel)\n   \"{\"\n   (s/join\n    \" \"\n    (for [[k v] m]\n      (let [k (cond\n                (keyword? k) (name k)\n                (number? k) (str k \"%\")\n                :else k)]\n        (str k (css-block v)))))\n   \"}\"))\n\n(defmethod css :default [_ _ _] \"\")\n\n(defn- inject-attr\n  \"Inject an attribute in a css style.\n  Used to inject a keyframe animation name\"\n  [sel m]\n  (if (and (contains? m :style) (contains? m :style/keyframes))\n    (assoc-in m [:style :animation-name] (animation-name sel))\n    m))\n\n(defn- remove-inline-styles\n  [m]\n  (apply dissoc m (keys (methods css))))\n\n(defn- hiccup-attribute->css\n  \"Given a hiccup attribute map, returns produced CSS and the updated attribute\n  map with the associated CSS styles removed from the map\"\n  [m]\n  (let [cls (gensym)\n        m (inject-attr {:cls cls} m)]\n    {:css (s/join \"\\n\"\n                  (for [[k v] m]\n                    (css {:cls cls} k v)))\n     :attributes (-> m\n                     (assoc :class cls)\n                     (remove-inline-styles))}))\n\n(defn- normalize-hiccup-vector\n  \"Takes a vector and normalizes it to [:tag {attributes...} content...]\"\n  [v]\n  (let [tag (first v)\n        has-attributes? (map? (second v))\n        attributes (if has-attributes? (second v) {})\n        content (if has-attributes? (drop 2 v) (drop 1 v))]\n    (into [tag attributes] content)))\n\n(def ignored-tags\n  #{:code})\n\n(defn extract-styles\n  \"Normalize a hiccup vector and produces css based on the style keys,\n  and strips style keys and values from the hiccup structure.\n  Returns map with hiccup vector and CSS string\"\n  [v]\n  (let [normal (normalize-hiccup-vector v)\n        tag (first normal)\n        attrs (second normal)\n        {:keys [attributes css]} (if (or (ignored-tags tag) (empty? attrs)) {:attributes attrs} (hiccup-attribute->css attrs))\n        hiccup (assoc normal 1 attributes)]\n    {:hiccup hiccup\n     :css    css}))\n\n(defn- inspect-item\n  \"Inspect the item, v. If it's an outer hiccup vector process the vector\n  and build up the css. Otherwise just return the item\"\n  [a v]\n  (cond\n    (and (vector? v) (map? (second v)))\n    (let [{:keys [css hiccup]} (extract-styles v)]\n      (swap! a str (str css \"\\n\"))\n      hiccup)\n    :else\n    v))\n\n(defn extract-all-styles\n  \"Traverse hiccup tree from the outside in.\n  Accumulates a new hiccup structure with style attributes stripped\n  and creates a css string\"\n  [v]\n  (let [css (atom \"\")]\n    {:hiccup (w/prewalk (partial inspect-item css) v)\n     :css    (s/trim @css)}))\n\n(defn hoist-styles\n  \"Extracts hiccup element styles and injects them in a top level div\"\n  [v]\n  (let [{:keys [hiccup css]} (extract-all-styles v)]\n    [:div\n     [:style css]\n     hiccup]))\n\n(comment\n  (def example-hiccup\n    [:div\n     {:style\n      {:background-color \"white\"\n       :color \"black\"}\n      :style/dark\n      {:background-color \"black\"\n       :color \"white\"}}]\n    [:p\n     {:style/hover\n      {:color \"red\"}}\n     \"Paragraph Content\"])\n\n  ;; Extract inline styles, return hiccup and css string\n  (extract-all-styles example-hiccup)\n\n  ;; Extract inline styles from hiccup, wrap in :div, and add generated css\n  ;; string in a :style tag\n  (hoist-styles example-hiccup)\n\n  ;; Use CSS element tag selectors, and generate a CSS string\n  (css\n   {:h1\n    {:style\n     {:color :red\n      :font-size \"12pt\"\n      :opacity 0.7\n      :transform '[(tanslateX 10) (translateY 20)]\n      :background-image '(linear-gradient :red :yellow :blue)\n      :padding [10 10]\n      :margin 0}}\n\n    #{:h2 :h3 :h4 :h5 :h6}\n    {:style {:color :black}\n     :style/hover {:color :red}\n     :style/dark {:color :blue}}\n\n    :div\n    {:style\n     {:content \"content\"\n      :grid-template-areas [[:header  :header]\n                            [:sidebar :body]\n                            [:footer  :footer]]}\n     :style/dark\n     {:background-color :black\n      :color :white}}}))\n"]}