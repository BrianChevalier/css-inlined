{"version":3,"sources":["demo/core.cljs"],"mappings":"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","names":["demo.core/highlight","x","js/module$node_modules$highlight_DOT_js$lib$core.highlight","demo.core/sty","demo.core/code-editor","initial-state","local-state","reagent.core.atom","cljs.core/deref","valid?","id","cljs.core.gensym","textarea-id","div-id","p1__55388#","radiant.reagent/div","radiant.reagent/textarea","js/document.getElementById","cljs.core.merge","value","cljs.core/reset!","clojure.edn.read_string","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","demo.core/segmented-control","seq55391","G__55392","cljs.core/first","cljs.core/next","G__55393","G__55394","self__4723__auto__","state","on-select","options","_","selected-color","unselected-color","iter__4529__auto__","s__55396","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__55398","cljs.core/chunk-buffer","i__55397","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__55395","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","option","cljs.core/name","cljs.core.partial","cljs.core._EQ_","demo.core/preview-view","content","map__55400","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","p1__55399#","css","hiccup","radiant.core/extract-all-styles","G__55402","cljs.core/Keyword","js/Error","radiant.reagent/pre","radiant.reagent/code","sb__4667__auto__","goog.string/StringBuffer","*print-newline*-orig-val__55403","cljs.core/*print-newline*","*print-fn*-orig-val__55404","cljs.core/*print-fn*","*print-newline*-temp-val__55405","*print-fn*-temp-val__55406","x__4668__auto__","cljs.pprint.pprint","demo.core/example-section","code","*print-newline*-orig-val__55407","*print-fn*-orig-val__55408","*print-newline*-temp-val__55409","*print-fn*-temp-val__55410","demo.core/home-page","demo.core/render","reagent.dom.render","demo.core/main!","js/module$node_modules$highlight_DOT_js$lib$core.registerLanguage","js/module$node_modules$highlight_DOT_js$lib$languages$clojure","js/module$node_modules$highlight_DOT_js$lib$languages$css","demo.core/reload!","cljs.core/chunk-first"],"sourcesContent":["(ns demo.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [radiant.core :as rad]\n            [radiant.reagent :refer [div pre code textarea]]\n            [clojure.edn :as edn]\n            [\"highlight.js/lib/core\" :as hljs]\n            [\"highlight.js/lib/languages/clojure\" :as hljsclj]\n            [\"highlight.js/lib/languages/css\" :as hljscss]\n            [clojure.pprint :as pprint]))\n\n(defn highlight [x]\n  (->> x\n       (hljs/highlight \"clojure\")\n       .-value))\n\n(def sty\n  {:position :absolute\n   :width \"90%\"\n   :height \"90%\"\n   :padding 10\n   :top 0\n   :left 0\n   :font-family \"monospace\"\n   :resize :none\n   :overflow-wrap :break-word\n   :white-space :pre-wrap\n   ;:background :transparent\n   :font-size \"1.2rem\"\n   :line-height \"1.2rem\"})\n\n(defn code-editor [initial-state]\n  (let [local-state (r/atom (str @initial-state))\n        valid? (r/atom true)\n        id (gensym)\n        textarea-id (str id \"_text\")\n        div-id (str id \"_div\")]\n    (fn []\n      [div\n       {:style\n        {:position :relative\n         :width \"100%\"\n         :height \"100%\"}}\n       [textarea\n        {:on-scroll #(set!\n                      (.-scrollTop (js/document.getElementById div-id))\n                      (.-scrollTop (js/document.getElementById textarea-id)))\n         :id textarea-id\n         :autoComplete \"off\"\n         :autoCorrect \"off\"\n         :autoCapitalize \"off\"\n         :spellCheck \"false\"\n         :style/focus {:border [3 :solid (if @valid? \"#2E3440\" \"#BF616A\")]}\n         :style (merge sty {:box-shadow '[(rgba \"15\" \"17\" \"21\" \"0.2\") 0 3 6 0]\n                            :color \"rgba(255, 255, 255, 0)\"\n                            :caret-color :white\n                            :border-radius 7\n                            :background-color \"#2E3440\"\n                            :border [3 :solid (if @valid? \"#2E3440\" \"#BF616A\")]})\n        :value @local-state\n        :on-change #(let [value (-> % .-target .-value)]\n                      (reset! local-state value)\n                      (reset! valid? false)\n                      (when (edn/read-string value)\n                        (reset! valid? true)\n                        (reset! initial-state value)))}]\n       [div\n        {:aria-hidden true\n         :id div-id\n         :style (merge sty {:whitespace :normal\n                            :overflow :hidden\n                            :color :white\n                            :pointer-events :none\n                        :border [3 :solid :transparent]})\n         :dangerouslySetInnerHTML\n         {:__html (str (highlight @local-state) \"</br>\")}}]])))\n\n(defn segmented-control\n  \"{:key key :label label}\"\n  [state on-select options & _]\n  (let [selected-color \"#D8DEE9\"\n        unselected-color \"#4C566A\"]\n    [div\n    {:style {:display :flex\n             :flex-direction :row\n             :border-radius 5\n             :width :fit-content\n             :overflow :hidden}}\n    (for [option options]\n      ^{:key (name (:key option))}\n      [div\n       {:on-click (partial on-select option)\n        :style {:background-color (if (= state (:key option)) selected-color unselected-color)\n                :color (if (= state (:key option)) unselected-color selected-color)\n                :padding [5 7]\n                :font-family \"sans-serif\"}}\n       (:label option)])]))\n\n(defn preview-view [content]\n  (let [local-state (r/atom :preview)]\n    (fn []\n     (let [{:keys [css hiccup]}\n           (rad/extract-all-styles\n            (edn/read-string @content))]\n       [:div\n        [segmented-control\n         @local-state\n         #(reset! local-state (:key %))\n         [{:key :preview :label \"Preview\"}\n          {:key :html-css :label \"Hiccup & CSS\"}]]\n        (case @local-state\n          :preview [:div\n                    [:style (str css)]\n                    hiccup]\n          :html-css [div {:style {:font-size \"10pt\" :overflow :auto}}\n                     [:h2 \"Hiccup\"]\n                     [pre\n                      {:style {:overflow :scroll\n                               :font-size \"1rem\"\n                               :border-radius 7\n                               :padding 10\n                               :background-color \"#2E3440\"}}\n                      [code\n                       {:style {:overflow :scroll}\n                        :dangerouslySetInnerHTML\n                        {:__html (highlight (with-out-str (pprint/pprint hiccup)))}}]]\n                     [:h2 \"CSS\"]\n                     [pre\n                      {:style {:overflow-x :scroll\n                               :font-size \"1rem\"\n                               :border-radius 7\n                               :padding 10\n                               :background-color \"#2E3440\"}}\n                      [code\n                       {:dangerouslySetInnerHTML\n                        {:__html (->> css (hljs/highlight \"css\") .-value)}}]]])]))))\n\n(defn example-section [code]\n  (let [code (r/atom (with-out-str (pprint/pprint code)))]\n    (fn []\n     [div\n      {:style\n       {:display :grid\n        :margin [0 :auto]\n        :width \"100%\"\n        :height \"100%\"\n        :grid-template-areas [[:inputarea :outputarea]]\n        :grid-template-rows  \"1fr\"\n        :grid-template-columns [\"1fr\" \"1fr\"]}\n       :style/large\n       {:max-width 1000\n        :padding-top 0}\n       :style/medium\n       {:max-width 1000\n        :padding-top 0}\n       :style/small\n       {:grid-template-areas [[:inputarea] [:outputarea]]\n        :grid-template-rows \"1fr 1fr\"\n        :grid-template-columns \"1fr\"}}\n      [div\n       {:style\n        {:grid-area :inputarea\n         :margin 20\n         :width \"100%\"}}\n  ;     [:h3 {:style {:opacity 0.5}} \"Input\"]\n       [code-editor code]]\n      [div\n       {:style\n        {:overflow :scroll\n         :margin 20\n         :grid-area :outputarea}}\n   ;    [:h3  {:style {:opacity 0.5}} \"Output\"]\n       [preview-view code]]])))\n\n(defn home-page []\n  [div\n   {:style {:margin 0\n            :padding 0}}\n   [:link {:rel \"stylesheet\"\n           :href \"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/styles/nord.min.css\"\n           :integrity \"sha512-igI4zzTHEU3IASS/ojMD7tO6hScqpnEnz41u+xVRNZvZEaF3XaCdre0qZ08frR1hri9+aSNeAXlQz1DS3luvxA==\"\n           :crossOrigin \"anonymous\"}]\n   [:style \"textarea:focus { outline: none; }\n* {color: white;}\nh1, h2, h3, h4, h5, p, li {font-family: sans-serif}\"]\n   [div\n    {:style {:text-align :center\n             :width \"100%\"\n             :height \"fit-content\"\n             :padding [30 0]\n             :margin 0\n             :background '(linear-gradient \"120deg\" \"#2E3440\" \"#2E3440\")}}\n    [:h1 {:style {:color \"#D8DEE9\" :opacity 0.9}} \"Radiant CSS\"]\n    [:h2 {:style {:color \"#D8DEE9\" :opacity 0.5}} \"Write CSS as Clojure Data Structures\"]]\n   ;; First example\n   [example-section\n     [:div\n      [:h2\n       {:style {:color :white}}\n       \"Radiant\"]\n      [:p {:style {:color :white}}\n       \"Radiant is a Clojure(Script) library that lets you express\n        CSS as regular Clojure data structures\"]]]\n   [example-section\n    [:div\n     [:style \"li code {border-radius: 3px;font-size:0.9rem; background-color: #4C566A;color:#ECEFF4;padding:0px 5px;margin:5px;} li {margin:5px}\"]\n     [:h2 \"Express CSS as Data\"]\n     [:p \"By default values are converted based on the type of the\n          value according to the following:\"]\n     [:ul\n      [:li \"string: passed through, without quotes\"]\n      [:ul\n       [:li [:code \"\\\"red\\\"\"] \"->\" [:code \"red\"]]]\n      [:li \"keyword: passed through without leading \" [:code \":\"]]\n      [:ul\n       [:li [:code \":red\"] \"->\" [:code \"red\"]]]\n      [:li \"symbols: passed through\"]\n     [:ul\n      [:li [:code \"'red\"] \"->\" [:code \"red\"]]]\n      [:li \"number: converted to string and px are added as the unit,\n            unless the CSS key accepts dimensionless values\"]\n      [:ul\n       [:li [:code \"42\"] \"->\" [:code \"42px\"]]]\n      [:li \"list: converted to CSS function call with comma separated arguments\"]\n      [:ul\n       [:li [:code \"'(linear-gradient :red :yellow :blue)\"] \"->\" [:code \"linear-gradient(red, yellow, blue)\"]]]\n      [:li \"vector: space separated values (each value is processed by the same type dispatch)\"]\n      [:ul\n       [:li [:code \"[5 5]\"] \"->\" [:code \"5px 5px\"]]\n       [:li [:code \"[0 :auto]\"] \"->\" [:code \"0 auto\"]]\n       [:li [:code \"'[(translateX 10) (translateY 20)]\"] \"->\"\n        [:code \"translateX(10px) translateY(20px)\"]]\n       [:li [:code \"'(circle [75 :at :center])\"] \"->\" [:code \"circle(75px at center)\"]]]]]]\n   [example-section\n    [:div\n     [:h2 \"Inline Pseudoselectors\"]\n     [:p \"Use pseuselectors in your Hiccup.\"]\n     [:p\n      {:style/hover {:color :red}}\n      \"Hover over this element\"]]]\n   [example-section\n    [:div\n     [:h2 \"Inline Animations\"]\n     [:p\n      {:style\n       {:padding 10\n        :border-radius 7\n        :color \"#2E3440\"\n        :animation-duration \"6s\"\n        :animation-iteration-count :infinite}\n       :style/keyframes {0  {:background-color \"#BF616A\"}\n                         20 {:background-color \"#D08770\"}\n                         40 {:background-color \"#EBCB8B\"}\n                         60 {:background-color \"#A3BE8C\"}\n                         80 {:background-color \"#B48EAD\"}\n                         100  {:background-color \"#BF616A\"}}}\n      \"Use CSS Keyframe animations, inline. The background of this element will cycle infinitely over a rainbow.\"]]]\n   [example-section\n    [:div\n     [:h2 \"Media Queries\"]\n     [:p\n      \"Use CSS media queries, inline such as theme and screen media queries.\"]\n     [:p {:style {:padding 10\n                  :border-radius 7}\n          :style/light {:color \"#2E3440\" :background-color \"#D8DEE9\"}\n          :style/dark {:color \"#D8DEE9\" :background-color \"#2E3440\"}}\n      \"The background here will be light, and text will be dark when your system is in 'light mode' and the colors will switch in dark mode\"]\n     [:p {:style {:padding 10\n                  :border-radius 7}\n          :style/small {:background-color \"#BF616A\"}\n          :style/medium {:background-color \"#EBCB8B\"}\n          :style/large {:background-color \"#A3BE8C\"}}\n      \"This background will be red on small screens, yellow on medium screens, and green on large screens.\"]]]])\n\n\n\n\n(defn render []\n  (rdom/render [home-page] (js/document.getElementById \"root\")))\n\n(defn main!\n  \"Once per app\"\n  []\n  (hljs/registerLanguage \"clojure\" hljsclj)\n  (hljs/registerLanguage \"css\" hljscss)\n  (render))\n\n(defn reload!\n  \"On each reload, when the file is saved\"\n  []\n  (render))\n"]}