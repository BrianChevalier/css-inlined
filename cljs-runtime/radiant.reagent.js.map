{"version":3,"sources":["radiant/reagent.cljs"],"mappings":";AAMA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAM,AAAA,AAACC;;AAEhB,AAAA,AAAOC,AAAgBC,AAASC;AAAhC,AACE,AAAU,AAACC,AAAOD;AAAlB;;AAAA,AACE,AAAME,AAAG,AAACC;AACJC,AAAG,AAAA,AAACC;AADV,AAEE,AAAM,AAAaD,AACb,AAAA,AAAA,AAACE,AAAcJ,AAAGH,AAASC;;AACjC,AAAcO,AAAiBH;;AAC/B,AAAA,AAACI,AAAMZ,AAAMa,AAAOV,AAASC,AAAOE;;AACpCA;;;AAEN,AAAA,AAAOQ,AAAWX,AAASC;AAA3B,AACE,AAAAW,AAAI,AAAA,AAAAC,AAAA,AAACC,AAAKjB,AAAOG,AAASC;AAA1B,AAAA,AAAAW;AAAAA;;AACI,AAACb,AAAeC,AAASC;;;AAE/B,AAAA,AAAOc,AAAYC;AAAnB,AACE,AAACC,AACA,AAAKD,AAAMhB;AAAX,AACE,AAAA,AAAQ,AAACkB,AAAUF,AAAMhB;AACvBgB;;AACA,AAAMf,AAAM,AAACa,AAAIE,AAAMhB;AACjBmB,AAAM,AAACR,AAAUX,AAASC;AADhC,AAEMe,AACA,AAACI,AAAOpB,AACR,AAAA,AAAA,AAACqB,AAAcC,AAAQH;;AACjCH,AACA,AAACO,AAAK,AAACC,AAAQjB;;AAElB,AAAA,AAAA,AAAAkB,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAAQO,AAAUtB,AAAQuB;AAAhC,AACE,AAAA,AAACC,AAAMF,AACA,AAAA,AAAQ,AAACG,AAAKzB,AACZA,AACA,AAACD,AAAWC,AACfuB;;;AALR,AAAA,AAAA,AAAMR;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAG,AAAAJ;;;AAAA,AAOA,AAAKU,AAAO,AAAA,AAACC,AAAQZ;AACrB,AAAKa,AAAO,AAAA,AAACD,AAAQZ;AACrB,AAAKc,AAAO,AAAA,AAACF,AAAQZ;AACrB,AAAKe,AAAO,AAAA,AAACH,AAAQZ;AACrB,AAAKgB,AAAO,AAAA,AAACJ,AAAQZ;AACrB,AAAKiB,AAAO,AAAA,AAACL,AAAQZ;AACrB,AAAKkB,AAAO,AAAA,AAACN,AAAQZ;AACrB,AAAKmB,AAAO,AAAA,AAACP,AAAQZ;AACrB,AAAKoB,AAAO,AAAA,AAACR,AAAQZ;AACrB,AAAKqB,AAAO,AAAA,AAACT,AAAQZ;AACrB,AAAKsB,AAAO,AAAA,AAACV,AAAQZ;AACrB,AAAKuB,AAAO,AAAA,AAACX,AAAQZ;AACrB,AAAKwB,AAAO,AAAA,AAACZ,AAAQZ;AACrB,AAAKyB,AAAK,AAAA,AAACb,AAAQZ;AACnB,AAAK0B,AAAI,AAAA,AAACd,AAAQZ;AAClB,AAAK2B,AAAc,AAAA,AAACf,AAAQZ","names":["js/radiant","js/radiant.reagent","js/radiant.reagent.cache","radiant.reagent/cache","cljs.core.atom","radiant.reagent/generate-class","selector","style","cljs.core/empty?","k","cljs.core.gensym","el","js/document.createElement","radiant.core/css","js/document.head","cljs.core.swap_BANG_","cljs.core/assoc","radiant.reagent/get-class","or__4126__auto__","cljs.core/deref","cljs.core.get","radiant.reagent/attrs->css","attrs","cljs.core.reduce","cljs.core/contains?","class","cljs.core.dissoc","cljs.core.update","cljs.core/str","cljs.core/keys","cljs.core/methods","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","radiant.reagent/styled","seq55379","G__55380","cljs.core/first","cljs.core/next","G__55381","self__4723__auto__","component","children","cljs.core.into","cljs.core/map?","radiant.reagent/a","cljs.core.partial","radiant.reagent/table","radiant.reagent/tbody","radiant.reagent/thead","radiant.reagent/tr","radiant.reagent/th","radiant.reagent/td","radiant.reagent/div","radiant.reagent/span","radiant.reagent/input","radiant.reagent/button","radiant.reagent/img","radiant.reagent/iframe","radiant.reagent/code","radiant.reagent/pre","radiant.reagent/textarea"],"sourcesContent":["(ns radiant.reagent\n  \"Provides dynamic client-side reagent components\n   Extracts style maps, creates css and inserts it at the head of the DOM, caching\n   styles that have already been added.\"\n  (:require [radiant.core :as rad]))\n\n(defonce cache (atom {}))\n\n(defn- generate-class [selector style]\n  (when-not (empty? style)\n    (let [k  (gensym)\n          el (js/document.createElement \"style\")]\n      (set! (.-innerHTML el)\n            (rad/css {:cls k} selector style))\n      (.appendChild js/document.head el)\n      (swap! cache assoc [selector style] k)\n      k)))\n\n(defn- get-class [selector style]\n  (or (get @cache [selector style])\n      (generate-class selector style)))\n\n(defn- attrs->css [attrs]\n  (reduce\n   (fn [attrs selector]\n     (if-not (contains? attrs selector)\n       attrs\n       (let [style (get attrs selector)\n             class (get-class selector style)]\n         (-> attrs\n             (dissoc selector)\n             (update :class str \" \" class)))))\n   attrs\n   (keys (methods rad/css))))\n\n(defn styled [component attrs & children]\n  (into [component\n         (if-not (map? attrs)\n           attrs\n           (attrs->css attrs))]\n        children))\n\n(def a      (partial styled :a))\n(def table  (partial styled :table))\n(def tbody  (partial styled :tbody))\n(def thead  (partial styled :thead))\n(def tr     (partial styled :tr))\n(def th     (partial styled :th))\n(def td     (partial styled :td))\n(def div    (partial styled :div))\n(def span   (partial styled :span))\n(def input  (partial styled :input))\n(def button (partial styled :button))\n(def img    (partial styled :img))\n(def iframe (partial styled :iframe))\n(def code (partial styled :code))\n(def pre (partial styled :pre))\n(def textarea      (partial styled :textarea))\n"]}